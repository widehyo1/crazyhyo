2021.07.20

<이론>
  3. MAX(column명), MIN(column명)
   - MAX : 주어진 컬럼명 중 최대 값을 반환
   - MIN : 주어진 컬럼명 중 최소 값을 반환
   - 집계함수는 다른 집계함수를 포함 할 수 없다.

NULL처리 함수
  - 오라클에서 각 컬럼의 기본 초기값은 모두 NULL임
  - NULL 자료에 대한 사칙연산 겨로가는 모두 NULL임
  - NULL 자료에 대한 연산자 및 함수로 IS NULL, IS NOT NULL, NVL, NVL2, NULLIF 등이 사용됨

  1. IS NULL, IS NOT NULL
   - 특정 컬럼이나 계산된 값이 NULL인지 판별하기 위해 사용
   - '='연산자로 NULL값 여부를 판별하지 못함

   2. NVL(c, val)
    - 'c'의 값을 판단하여 그 값이 NULL이면 'val' 값을 반환하고, NULL이 아니면 'c'의 값을 반환
    - 'c'와 'val'의 자료형이 동일해야 함.
    
오라클에서는 숫자가 가장 강력함.
c와 val에서 한 쪽이 숫자고 한 쪽이 문자인 경우 서로 자동형변환이 불가능한 경우 오류가 발생한다.

   3. NVL2(c, val1, val2)
   - 'c'값을 판단하여 그 값이 NULL이면 'val2'를 반환하고 NULL이 아니면 'val1'을 반환 함
   - 'val1'과 'val2'의 데이터 타입이 같아야 함
   - 이때 'c'의 데이터 타입은 무관

   4. NULLIF(c1, c2)
    - 'c1'과 'c2'를 비교하여 같으면 NULL을 반환하고, 같지 않으면 c1을 반환 함

=========================================================================

객체지향 프로그래밍(Object Oriented Programming)
- 프로그래밍을 단순히 코드의 연속으로 보는 것이 아니라 객체간의 상호작용으로 보는 것
- 코드의 재사용성이 높고 유지보수가 용이하다.

자바의 모든 클래스는 object 클래스를 상속함

지역변수 : 메서드 안에서만 사용하는 변수

전역변수 : 클래스 전체 영역에서 사용하는 변수, 초기화하지 않아도 기본값으로 자동 초기화 됨.

- 메서드 : 변수를 가지고 할 일 //// 클래스 내부에서 정의된 함수
- 선언 방법 : 리턴타입 메서드명(파라미터) { }
- 파라미터(매개변수) : 실행에 필요한 정보
- 리턴타입(반환타입) : 실행 후 돌려줘야하는 결과물
- 리턴타입이 존재한다면 반드시 리턴을 설정해야 한다.

//접근제어자 + class + 클래스명(반드시 맨 앞글자 대문자)
//변수명, 메소드명 모두 소문자
//import는 class와 패키지 상에 위치
//클래스는 변수와 메서드로 구성


<실습>

사용예) 2005년 6월 모든 상품에 대한 매출현황을 조회하시오
사용예) 모든 부서별 사원수를 조회하시오(NULL부서코드는 무시)
   SELECT B.DEPARTMENT_ID     AS "부서코드",
          B.DEPARTMENT_NAME   AS "부서명",
--          COUNT(*)          AS "사원수1"
          COUNT(A.SALARY)       AS "사원수"
     FROM HR.EMPLOYEES A, HR.DEPARTMENTS B
    WHERE A.DEPARTMENT_ID(+)= B.DEPARTMENT_ID
    GROUP BY B.DEPARTMENT_ID, B.DEPARTMENT_NAME
    ORDER BY 1;
주의) COUNT(*)는 NULL을 무시하지 않으므로 외부조인에서 서로 사맞디 아니한 행들도 집계한다.
ANSI를 쓰면 어떤 SQL에서도 모두 수행된다.
오라클이나 다른 언어에서 그 언어만의 특수한 문법을 사용한다면, 그 문법은 그 언어에 특화된, 최적화를 위한 명령어이다.

   SELECT B.DEPARTMENT_ID     AS "부서코드",
          B.DEPARTMENT_NAME   AS "부서명",
          COUNT(*)          AS "사원수1"
     FROM HR.EMPLOYEES A, HR.DEPARTMENTS B
    WHERE B.DEPARTMENT_ID(+)= A.DEPARTMENT_ID
    GROUP BY B.DEPARTMENT_ID, B.DEPARTMENT_NAME
    ORDER BY 1;   
 
SELECT DEPARTMENT_ID    AS "부서코드",
           COUNT(*)         AS "사원수1",
           COUNT(LAST_NAME) AS "사원수2"
      FROM HR.EMPLOYEES
     GROUP BY DEPARTMENT_ID
     ORDER BY 1;


모든이라는 단어가 붙으면 그 대상이 되는 컬럼을 대상으로 외부조인할 생각을 하면 된다.

사용예)2005년 월별 매입액 중 최대매입액, 최소매입액
      Alias는 월, 최대매입액, 최소매입액

    SELECT EXTRACT(MONTH FROM BUY_DATE) AS  "월",
           MAX(BUY_QTY * BUY_COST)      AS  "최대매입액",
           MIN(BUY_QTY * BUY_COST)      AS  "최소매입액"
      FROM BUYPROD
     WHERE EXTRACT(YEAR FROM BUY_DATE) = 2005
     GROUP BY EXTRACT(MONTH FROM BUY_DATE)
     ORDER BY 1;

기간은 일반조건으로 처리해주어야 한다, WHERE에서 다룸

사용예)2005년 5월 최대구매 고객정보를 조회하시오.
      Alias는 회원번호, 회원명, 구매금액

    SELECT B.MEM_ID             AS  "회원번호",
           B.MEM_NAME           AS  "회원명",
           SUM(A.CART_QTY * C.PROD_PRICE)   AS  "구매금액"
      FROM CART A, MEMBER B, PROD C
     WHERE A.CART_MEMBER = B.MEM_ID
           AND A.CART_PROD = C.PROD_ID
           AND SUBSTR(A.CART_NO,1,6) = '200505'
     GROUP BY B.MEM_ID, B.MEM_NAME;
     ORDER BY 3 DESC;

최대구매금액을 가지는 회원만 가져오는 것은 지금은 서브쿼리 없이는 불가함
    
    (SUBQUERY)
SELECT  A.MID               AS  "회원번호",
        A.MNAME             AS  "회원명",
        A.AMT               AS  "구매금액"
  FROM  (SELECT B.MEM_ID             AS  MID,
               B.MEM_NAME           AS  MNAME,
               SUM(A.CART_QTY * C.PROD_PRICE)   AS  AMT
          FROM CART A, MEMBER B, PROD C
         WHERE A.CART_MEMBER = B.MEM_ID
               AND A.CART_PROD = C.PROD_ID
               AND SUBSTR(A.CART_NO,1,6) = '200505'
         GROUP BY B.MEM_ID, B.MEM_NAME
         ORDER BY 3 DESC) A
 WHERE ROWNUM = 1;         

SELECT  D.MID               AS  "회원번호",
        D.MNAME             AS  "회원명",
        E.MEM_ADD1 ||' ' || E.MEM_ADD2               AS  "주소",
        E.MEM_HP AS "연락처",
        D.AMT               AS  "구매금액"
  FROM  (SELECT B.MEM_ID             AS  MID,
               B.MEM_NAME           AS  MNAME,
               SUM(A.CART_QTY * C.PROD_PRICE)   AS  AMT
          FROM CART A, MEMBER B, PROD C
         WHERE A.CART_MEMBER = B.MEM_ID
               AND A.CART_PROD = C.PROD_ID
               AND SUBSTR(A.CART_NO,1,6) = '200505'
         GROUP BY B.MEM_ID, B.MEM_NAME
         ORDER BY 3 DESC) D, MEMBER E
 WHERE D.MID = E.MEM_ID
       AND ROWNUM = 1;

사용예) 사원테이블에서 영업실적코드(COMMISSION_PCT)가 NULL이 아닌 사원의
       사원번호, 사원명, 입사일, 부서코드, 급여를 조회하시오
       
    SELECT EMPLOYEE_ID          AS  "사원번호",
           EMP_NAME             AS  "사원명",
           HIRE_DATE            AS  "입사일",
           DEPARTMENT_ID        AS  "부사코드",
           SALARY               AS  "급여"
      FROM HR.EMPLOYEES
     WHERE COMMISSION_PCT IS NOT NULL
     ORDER BY 1;
     
   -- '=' '<>' '!='연산자로 NULL값 여부를 판별하지 못함     

사용예)상품테이블에서 PROD_SIZE 값이 NULL이면 '상품크기정보 없음' 문자열을 출력하시오
      Alias는 상품코드, 상품명, 크기, 매입단가
      
    SELECT PROD_ID                              AS  "상품코드",
           PROD_NAME                            AS  "상품명",
           NVL(PROD_SIZE,'상품크기정보 없음')     AS  "크기",
           PROD_COST                            AS  "매입단가"
      FROM PROD;
      
사용예)사원테이블에서 사원번호, 사원명, 부서코드, 직무코드를 출력하시오      
      단, 부서코드가 NULL이면 'CEO'를 출력하시오
      
    SELECT EMPLOYEE_ID                              AS  "사원번호",
           EMP_NAME                                 AS  "사원명",
           NVL(TO_CHAR(DEPARTMENT_ID),'CEO')        AS  "부서코드",
           JOB_ID                                   AS  "직무코드"
      FROM HR.EMPLOYEES;
      
**상품테이블에서 분류코드가 P301인 상품의 판매가를 매입가의 90%로 UPDATE하시오
UPDATE  PROD
SET     PROD_PRICE = PROD_COST
WHERE   LOWER(PROD_LGU) = LOWER('P301');

SELECT * FROM PROD
WHERE PROD_LGU = 'P301';

ROLLBACK;
COMMIT;

UPDATE -> SELECT -> COMMIT은 한 단위이다.

사용예)2005년 7월 모든 상품에 대한 판매정보를 조회하시오.
      Alias는 상품코드, 판매수량합계, 판매금액합계
      
    SELECT B.PROD_ID                        AS  "상품코드",
           SUM(A.CART_QTY)                  AS  "판매수량합계",
           SUM(A.CART_QTY * B.PROD_PRICE)   AS  "판매금액합계"
      FROM CART A, PROD B
     WHERE A.CART_PROD(+)= B.PROD_ID
           AND SUBSTR(A.CART_NO,1,6) = '200507'
     GROUP BY B.PROD_ID
     ORDER BY 2,3;
     
     
외부조인에서 일반조인조건이 실행되면 외부조인을 실행시키지 않고 일반조인(INNER JOIN)이 실행된다.
위의 예에서 오라클 조인조건 + 일반조인 조건이 적용되어 외부조인이 아니라 내부 조인이 실행되면서 원하는 형태로 출력되지 않았다

    SELECT B.PROD_ID                        AS  "상품코드",
           NVL(SUM(A.CART_QTY),0)                  AS  "판매수량합계",
           NVL(SUM(A.CART_QTY * B.PROD_PRICE),0)   AS  "판매금액합계"
      FROM CART A
     RIGHT OUTER JOIN PROD B ON(A.CART_PROD= B.PROD_ID
           AND SUBSTR(A.CART_NO,1,6) = '200507')
     GROUP BY B.PROD_ID
     ORDER BY 2,3 ASC;

좋은 출력습관은 NVL(,0)이다. NULL은 0으로 출력하는 것이다.

사용예)사원테이블에서 사원번호, 사원명, 부서코드, 직무코드를 출력하시오.
      단, 부서코드가 NULL이면 'CEO'를 출력하시오.
      
    SELECT EMPLOYEE_ID              AS  "사원번호",
           EMP_NAME              AS  "사원명",
           NVL2(DEPARTMENT_ID,TO_CHAR(DEPARTMENT_ID),'CEO')              AS  "부서코드",
           JOB_ID              AS  "직무코드" 
      FROM HR.EMPLOYEES;
      
사용예)상품테이블에서 상품의 색상정보(PROD_COLOR)의 값이 NULL이면 '색상정보 없는 상품'을, NULL이 아니면 '색상정보 보유 상품'을 출력하시오

SELECT PROD_ID AS  "상품코드",
       PROD_NAME AS  "상품명",
       NVL2(PROD_COLOR,'색상정보 보유 상품','색상정보 없는 상품') AS  "색상정보"
  FROM PROD;

사용예)상품테이블에서 판매가와 매입가를 비교하여 같지 않으면 '정상상품', 같으면 '단종상품'을 비고란에 출력하시오
      Alias는 상품코드, 상품명, 매입가, 판매가, 비고
      
    SELECT PROD_ID AS "상품코드",
           PROD_NAME AS "상품명",
           PROD_COST AS "매입가",
           PROD_PRICE AS "판매가",
           NVL2(NULLIF(PROD_PRICE,PROD_COST), '정상상품', '단종상품') AS "비고"
      FROM PROD;

사용예)상품테이블에서 판매가와 매입가를 비교하여 같지 않으면 판매가를, 같으면 '단종상품'을 판매가란에 출력하시오
      Alias는 상품코드, 상품명, 매입가, 판매가
      
    SELECT PROD_ID AS "상품코드",
           PROD_NAME AS "상품명",
           PROD_COST AS "매입가",
           LPAD(NVL(TO_CHAR(NULLIF(PROD_PRICE,PROD_COST)),'단종상품'),8) AS "판매가"
      FROM PROD;
      
    SELECT PROD_ID AS "상품코드",
           PROD_NAME AS "상품명",
           PROD_COST AS "매입가",
           NVL(LPAD(TO_CHAR(NULLIF(PROD_PRICE,PROD_COST)),10),LPAD(TRIM('단종상품'),11)) AS "판매가"
      FROM PROD;

=========================================================================

	 * 전역변수 하나를 선언 및 초기화 해주세요
	 * 리턴타입과 파라미터가 없는 메서드 하나를 만들어주세요.
	 * 메서드 안에서 전역변수를 출력해주세요.
	 * 전역변수와 동일한 타입의 리턴타입이 있고 파라미터는 없는 메서드 하나를 만들어 주세요.
	 * 메서드 안에서 전역변수를 리턴해주세요.
	 * 리턴타입은 없고 팔미터가 있는 메서드 하나를 만들어주세요.
	 * 메서드 안에서 파라미터를 출력해주세요.
	 * int타입의 리턴타입과 int타입의 파라미터 두개가 있는 메서드 하나를 만들어 주세요.
	 * 메서드 안에서 두 파라미터를 곱한 결과를 리턴해주세요.

방금 만든 클래스의 객체를 생성하고 변수에 저장해주세요
객체가 저장된 변수를 통해 메서드를 호출해주세요.
파라미터가 있는 메서드는 타입에 맞는 값을 넘겨주시고,
리턴타입이 있는 메서드는 리턴받은 값을 출력해주세요.

<TMI>

[BUYER]
BUYER_ID, BUYER_NAME, BUYER_LGU, BUYER_BANK, BUYER_BANKNO, BUYER_BANKNAME, BUYER_ZIP,
BUYER_ADD1, BUYER_ADD2, BUYER_COMTEM, BUYER_FAX, BUYER_MAIL, BUYER_CHARGER, BUYER_TELEXT
[BUYPROD]


데이터베이스는 현재의 상태를 설명할 수 있을 뿐만 아니라 과거 및 미래로의 확장성을 가지도록 설계되어야 한다.
예전에 썼다가 지금은 쓰지 않는 부서코드 혹은 앞으로 쓸 가능성이 높은 부서코드가 있을 수 있으므로 현재 데이터를 조회하면 NULL인 부서코드 발생
그리고 이런 식으로 설계된 데이터베이스가 기본을 갖춘 데이터베이스다.
아우터조인을 시킬 때 대상이 되는 두 테이블이 모두 부족한 부분이 있는 경우, 그러한 데이터도 모두 출력하는 아우터 조인은 FULL OUTER JOIN이다.
외부조인에서 데이터가 더 많은 테이블은 자료의 수가 아니라 종류의 수가 많은 테이블이다. 이 테이블을 기준으로 외부조인 한다.
ㄴ 외부조인에서 공통된 컬럼 COL을 기준으로 데이터의 수를 세되, 데이터 수는 A 테이블에 있는 COL의 종류와 B 테이블에 있는 COL의 종류의 개수를 비교

직선을 사용할 때는 식별자관계이고 점선을 사용할 때는 비식별자 관계이다
부모없이 태어나는 엔터티를 키엔터티 혹은 DB모델러들은 앤코아가 잘나간다
게시글번호 그날의 차례대로 숫자부여하게 특수문자 없는 숫자로만 구성된 문자열로 설정하고 MAX + 1로 업데이트해라(시퀀스로도 해결가능 니 능력이 된다면)
특정 행위에 종속된 엔터티 : 액션 엔터티, 부모 엔터티에 종속됨
데이터베이스는 1촌만 안다
서브쿼리의 테이블 별칭과 바깥쪽의 테이블 별칭은 겹쳐도 상관없다.

커서라는 것을 쓰면 됨 PL/SQL에서 사용

ROWNUM과 정렬 이용해서 하나만 뽑아내는거 괜찮긴 하네

퀵베이직, 비주얼베이직이 한글이 포함한 글씨를 정렬하는데는 가장 좋은 언어이다.


=========================================================================
